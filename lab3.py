# 1. Четные числа (пока).
# Напишите программу, которая будет печатать все четные числа от 1 до N, где N - положительное целое число,
# введенное пользователем. Используйте цикл while.

n = int(input("Введите число: "))  # Запрашиваем у пользователя число N
i = 1  # Инициализируем счетчик
while i <= n:
    if i % 2 == 0:  # Если число четное, то печатаем его
        print(i)
    i += 1

# 2. Факториал (While).
# Напишите программу для вычисления факториала числа N, где N - положительное целое число,
# введенное пользователем. Используйте цикл while.

f = int(input("Введите число: "))  # Запрашиваем у пользователя число N
sum = 1  # Инициализируем переменную для хранения результата
i = 1  # Инициализируем счетчик
while i <= f:
    sum *= i  # Вычисляем факториал
    i += 1
print("Факториал числа N =", sum)

# 3. Поиск по номеру (перерыв).
# Напишите программу, которая попросит пользователя ввести цифры с клавиатуры, отыщет число 42 и,
# если оно введено, завершит работу программы, используя конструкцию break.

while True:
    num_search = int(input("Введите число: "))  # Запрашиваем у пользователя число
    if num_search == 42:
        break  # Если число 42, завершаем цикл
print("Число 42 найдено, завершение работы программы!!!")

# 4. Подсчет символов (строковые операции).
# Попросите пользователя ввести строку, затем подсчитайте и выведите количество букв "а" в этой строке.

str1 = input("Введите слово: ")  # Запрашиваем у пользователя строку
count = 0  # Инициализируем счетчик

for char in str1:
    if char == 'а' or char == 'А':  # Проверяем наличие буквы 'а' (регистронезависимо)
        count += 1

print(f"Количество букв 'а' в строке: {count}")

# 5. Сумма цифр числа (строковые операции).
# Попросите пользователя ввести число, затем найдите и выведите сумму его цифр.

sum_of_digits = input("Введите число: ")  # Запрашиваем у пользователя число
sum = 0  # Инициализируем переменную для хранения суммы

for digit in sum_of_digits:
    if digit.isdigit():  # Проверяем, является ли символ цифрой
        num_digit = int(digit)  # Преобразуем символ в целое число
        sum += num_digit  # Добавляем цифру к сумме

print("Сумма цифр числа:", sum)

# 6. Числа Фибоначчи (пока).
# Напишите программу для печати первых N чисел Фибоначчи, где N - положительное целое число, введенное пользователем.
# Используйте цикл while.

fibonacci = int(input("Введите количество членов последовательности Фибоначчи: "))  # Запрашиваем у пользователя N
i = 0
f1 = 0
f2 = 1
print(f1)  # Печатаем первое число Фибоначчи
print(f2)  # Печатаем второе число Фибоначчи

while i < fibonacci - 2:
    i += 1
    sum = f1 + f2  # Вычисляем следующее число Фибоначчи
    f1 = f2
    f2 = sum
    print(sum)  # Печатаем следующее число Фибоначчи

# 7. Переверните строку (операции со строками).
# Попросите пользователя ввести строку и выводите ее в обратном порядке.

str2 = input("Введите строку: ")  # Запрашиваем у пользователя строку
sum_str = ""  # Инициализируем переменную для хранения перевернутой строки

for i in range(len(str2) - 1, -1, -1):
    sum_str += str2[i]  # Переворачиваем строку

print("Перевернутая строка:", sum_str)

# 8. Пропустите четные (продолжайте).
# Напишите программу, которая предлагает пользователю ввести цифры,
# и если введенное число четное, оно будет пропущено с помощью конструкции continue.
# Программа должна вывести сумму всех нечетных чисел.

sum = 0  # Инициализируем переменную для хранения суммы
while True:
    numberrr = int(input("Введите число: "))  # Запрашиваем у пользователя число
    if numberrr == 0:  # Если число 0, завершаем цикл
        break
    if numberrr % 2 == 0:  # Если число четное, пропускаем его
        continue
    sum += numberrr  # Добавляем нечетное число к сумме

print("Сумма нечетных чисел:", sum)

# 9. Угадайте число (перерыв).
# Напишите игру, в которой компьютер выбирает случайное число от 1 до 100,
# а пользователь должен угадать это число. Программа должна отображать подсказки
# ("Слишком маленький" или "Слишком большой") и завершать работу,
# когда пользователь угадает число. Используйте конструкцию break, чтобы завершить игру.

randnum = random.randint(1, 100)  # Генерируем случайное число от 1 до 100
print(randnum)  # Для тестирования выводим загаданное число

while True:
    numwin = int(input("Угадайте число: "))  # Запрашиваем у пользователя число
    if randnum > numwin:
        print("Число больше чем это")
    elif randnum < numwin:
        print("Число меньше чем это")
    else:
        print("Поздравляем! Вы угадали число!")
        break

# 10. Палиндром (строковые операции).
# Попросите пользователя ввести строку и определить, является ли она палиндромом.

str222 = input("Введите строку: ")  # Запрашиваем у пользователя строку
pal = ""  # Инициализируем переменную для хранения перевернутой строки

for i in range(len(str222) - 1, -1, -1):
    pal += str222[i]  # Переворачиваем строку

if pal == str222:
    print("Это палиндром")
else:
    print("Это не палиндром")

# 11. Пронумеруйте до степени (пока).
# Напишите программу, которая предлагает пользователю ввести число X и степень Y.
# Затем вычислите и выведите X в степени Y, используя цикл while.

x = int(input("Введите число: "))  # Запрашиваем у пользователя число X
y = int(input("Введите степень: "))  # Запрашиваем у пользователя степень Y
i = 1
summm = 1
while i <= y:
    summm *= x  # Возводим X в степень Y
    i += 1
print(f"{x} в степени {y} равно {summm}")

# 12. Подсчет простых чисел (While, Break).
# Напишите программу, которая найдет и напечатает все простые числа в диапазоне от 1 до N,
# где N - положительное целое число, введенное пользователем.
# Используйте цикл while и конструкцию break для оптимизации процесса.

n = int(input("Введите число N: "))  # Запрашиваем у пользователя число N
i = 2

while i <= n:
    is_prime = True
    for j in range(2, int(i ** 0.5) + 1):
        if i % j == 0:
            is_prime = False
            break
    if is_prime:
        print(i)  # Печатаем простое число
    i += 1

# 13. Обратное число (строковые операции).
# Попросите пользователя ввести номер и напечатать его в обратном порядке.

number = input("Введите число: ")  # Запрашиваем у пользователя число
reversed_number = number[::-1]  # Переворачиваем строку
print("Число в обратном порядке:", reversed_number)

# 14. Проверьте на первичность (продолжайте).
# Напишите программу, которая проверяет, является ли число,
# введенное пользователем, простым числом. Если число не является простым,
# программа должна напечатать следующее простое число и продолжить тестирование.
# Используйте конструкцию continue.

def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True

number = int(input("Введите число для проверки на простоту: "))

while True:
    if is_prime(number):
        print(f"{number} - простое число.")
        break
    else:
        print(f"{number} не является простым числом.")
        number += 1

# 15. Шифр Цезаря (строковые операции).
# Попросите пользователя ввести строку и сдвинуть все буквы в строке на N позиций вперед по алфавиту (циклически),
# где N - целое число, введенное пользователем. Выведите зашифрованную строку.

def caesar_cipher(text, shift):
    encrypted_text = ""

    for char in text:
        if char.isalpha():
            is_upper = char.isupper()
            char = char.lower()
            shifted_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))
            if is_upper:
                shifted_char = shifted_char.upper()
            encrypted_text += shifted_char
        else:
            encrypted_text += char

    return encrypted_text

user_input = input("Введите строку: ")  # Запрашиваем у пользователя строку
shift = int(input("Введите сдвиг (целое число): ")  # Запрашиваем у пользователя сдвиг

encrypted_text = caesar_cipher(user_input, shift)
print("Зашифрованная строка:", encrypted_text)

